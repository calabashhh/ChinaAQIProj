<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Animated Maps</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <style>
        #map {
            height: 100vh;
        }

        
          /* Optional: adjust the values below to change the appearance of the legend */
  .legend {
      padding: 6px 8px;
      line-height: 18px;
      background: rgba(255,255,255,0.9);
      box-shadow: 0 0 15px rgba(0,0,0,0.2);
      border-radius: 5px;
  }

   /* Optional: adjust the values below to change the appearance of the legend color boxes */
   .legend i {
      width: 18px;
      height: 18px;
      float: left;
      margin-right: 8px;
      opacity: 0.7;
  }
        
    </style>
</head>
<body>
    <div id="map"></div>
    
    <script>
        // Initialize the map
        const map = L.map('map').setView([41.8070363,-87.5408951], 10); // Adjust view based on your region

        // Add a basemap
        var Esri_WorldGrayCanvas = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {
        attribution: 'Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ',
        maxZoom: 16
    }).addTo(map);
        
         let geojsonLayer = L.geoJson().addTo(map);
        
        // Define the style
     function getColor(value) {
                 return value > 300 ? '#5c0257':
                        value > 275 ? '#8f0768':
                        value > 250 ? '#c20654':
                        value > 225 ? '#db0f3f':
                        value > 200 ? '#fc2a05':
                        value > 175 ? '#fc6005':
                        value > 150 ? '#fc8505':
                        value > 125 ? '#fcb605':
                        value > 100 ? '#fcd305':
                        value > 75 ? '#f1ff2e':
                        value > 50 ? '#d0ff4f':
                       value > 25 ? '#29d967':
                        value > 1 ? '#00b06f':
                                          '#adadad';   
            }

            function style(feature){
                return {
                    fillColor: getColor(feature.properties.Monthly_average),   
                    weight: 2,
                    opacity: 1,
                    color: 'gray',
                    dashArray: '3',
                    fillOpacity: 0.5
                };
            }
        
               
        // Define labels for the GeoJSON layers
const layerLabels = {
'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Jan2018_average.geojson': 'January 2018',
'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Feb2018_average.geojson': 'February 2018',
'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Mar2018_average.geojson': 'March 2018',
'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Apr2018_average.geojson': 'April 2018',
'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/May2018_average.geojson': 'May 2018',
'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Jun2018_average.geojson': 'June 2018',
'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Jul2018_average.geojson': 'July 2018',
'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Aug2018_average.geojson': 'August 2018',
'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Sep2018_average.geojson': 'September 2018',
'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Oct2018_average.geojson': 'October 2018',
'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Nov2018_average.geojson': 'November 2018',
'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Dec2018_average.geojson': 'December 2018',


      



   // 'https://raw.githubusercontent.com/neiugis/animatedmaps/refs/heads/main/arson2020.geojson': 'Arson 2020',
  //  'https://raw.githubusercontent.com/neiugis/animatedmaps/refs/heads/main/arson2021.geojson': 'Arson 2021',
  //  'https://raw.githubusercontent.com/neiugis/animatedmaps/refs/heads/main/arson2022.geojson': 'Arson 2022',
  //  'https://raw.githubusercontent.com/neiugis/animatedmaps/refs/heads/main/arson2023.geojson': 'Arson 2023'
};
        
        // Add a legend to the map
const legend = L.control({ position: 'bottomright' });

legend.onAdd = function () {
    const div = L.DomUtil.create('div', 'legend');
    div.innerHTML = '<h4>Current Layer</h4>'; // Initial legend content
    return div;
};

legend.addTo(map);

// Function to dynamically update the legend
function updateLegend(label) {
    const legendDiv = document.querySelector('.legend');
    legendDiv.innerHTML = `<h4>Current Layer</h4><p>${label}</p>`;
}



     // List of GeoJSON files (each representing a timestamp)
const geojsonFiles = [
    'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Jan2018_average.geojson',
    'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Feb2018_average.geojson',
    'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Mar2018_average.geojson',
    'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Apr2018_average.geojson',
    'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/May2018_average.geojson',
    'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Jun2018_average.geojson',
    'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Jul2018_average.geojson',
    'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Aug2018_average.geojson',
    'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Sep2018_average.geojson',
    'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Oct2018_average.geojson',
    'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Nov2018_average.geojson',
    'https://raw.githubusercontent.com/calabashhh/ChinaAQIProj/refs/heads/main/Dec2018_average.geojson',

];

// Function to load and display a GeoJSON file
function loadGeoJson(url) {
    fetch(url)
        .then(response => response.json())
        .then(data => {
            geojsonLayer.clearLayers(); // Clear previous layer
        
    geojsonLayer = L.geoJson(data, {
                pointToLayer: function (feature, latlng) {
                    return L.circleMarker(latlng, pointStyle); // Apply the defined style
                },
           
            }).addTo(map); // Add updated layer to the map
            geojsonLayer.addData(data); // Add new data
        
        
          const currentLabel = layerLabels[url] || 'Unknown Layer';
            updateLegend(currentLabel);
        })
        .catch(error => console.error('Error loading GeoJSON:', error));
}

// Animate through the GeoJSON files
let currentIndex = 0;
function animateGeoJson() {
    if (currentIndex < geojsonFiles.length) {
        loadGeoJson(geojsonFiles[currentIndex]);
        currentIndex++;
        setTimeout(animateGeoJson, 1000); // Adjust delay (in milliseconds)
    } else {
        currentIndex = 0; // Reset animation (optional)
    }
}

// Start the animation
animateGeoJson();

    
        // Pause and Play functionality
let isPaused = false;

function toggleAnimation() {
    isPaused = !isPaused;
    if (isPaused == false) {
        animateGeoJson();
    }
}

// Add a button to toggle animation
const playPauseButton = L.control({ position: 'topright' });

playPauseButton.onAdd = function () {
    const div = L.DomUtil.create('div', 'play-pause-control');
    div.innerHTML = '<button id="play-pause">Pause</button>';
    div.style.padding = '5px';
    div.style.backgroundColor = 'white';
    div.style.borderRadius = '5px';
    div.style.cursor = 'pointer';
    div.onclick = function () {
        toggleAnimation();
        document.getElementById('play-pause').textContent = isPaused ? 'Play' : 'Pause';
    };
    return div;
};

playPauseButton.addTo(map);
        
 
    </script>
</body>
</html>
